calcSensitivity <- function(tp,fn)
{
return( tp/(tp+fn) )
}
calcSpecificity <- function(tn,fp)
{
return( tn/(tn+fp) )
}
calcFPR <- function(fp,tn)
{
return( fp/(fp+tn) )
}
calcACC <- function(tp,tn,fp,fn)
{
return( (tp+tn)/(tp+tn+fp+fn) )
}
calcF1 <- function(tp,tn,fp,fn)
{
return( (2*tp)/(2*tp+fp+fn) )
}
calcMCC <- function(tp,tn,fp,fn)
{
return( (as.numeric(tp)*as.numeric(tn)-as.numeric(fp)*as.numeric(fn))/sqrt( (as.numeric(tp)+as.numeric(fp))*(as.numeric(tp)+as.numeric(fn))*(as.numeric(tn)+as.numeric(fp))*(as.numeric(tn)+as.numeric(fn)) ))
}
comparison['calcFDR']<- calcFDR(comparison$FP,comparison$TP)
comparison['calcSensitivity'] <- calcSensitivity(comparison$TP,comparison$FN)
comparison['calcSpecificty'] <- calcSpecificity(comparison$TN,comparison$FP)
comparison['calcFPR'] <- calcFPR(comparison$FP,comparison$TN)
comparison['calcACC'] <- calcACC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcF1'] <- calcF1(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcMCC'] <- calcMCC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
jpeg(paste(out_dir + "plot1",sep=""))
plot(comparison$calcFDR,comparison$estimatedFDR,xlim = c(0.0,0.3),ylim=c(0.0,0.3))
dev.off()
jpeg(paste(out_dir + "plot2",sep=""))
plot(comparison$calcFPR,comparison$calcSensitivity,xlim=c(0.0,1.0),ylim=c(0.0,1.0))
dev.off()
write.table(comparison,export_matrix, sep = '\t' )
# export plots and df
print(export_matrix)
input_comparison <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/fragdb/fragdb_confusion_matrix.tsv"
out_dir <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/fragdb/"
export_matrix <- paste(out_dir + "fragdb_confusion_matrix_export.tsv", sep = "")
# Chunk 1: setup
library(dplyr)
# Chunk 2: cars
input_comparison <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/fragdb/fragdb_confusion_matrix.tsv"
out_dir <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/fragdb/"
export_matrix <- paste(out_dir, "fragdb_confusion_matrix_export.tsv", sep = "")
comparison <- read.csv(input_comparison, sep = "\t", quote = '\"')
comparison <- comparison[order(comparison$estimatedFDR),]
# Chunk 3
calcFDR <- function(fp,tp)
{
return ( fp/(fp+tp) )
}
calcSensitivity <- function(tp,fn)
{
return( tp/(tp+fn) )
}
calcSpecificity <- function(tn,fp)
{
return( tn/(tn+fp) )
}
calcFPR <- function(fp,tn)
{
return( fp/(fp+tn) )
}
calcACC <- function(tp,tn,fp,fn)
{
return( (tp+tn)/(tp+tn+fp+fn) )
}
calcF1 <- function(tp,tn,fp,fn)
{
return( (2*tp)/(2*tp+fp+fn) )
}
calcMCC <- function(tp,tn,fp,fn)
{
return( (as.numeric(tp)*as.numeric(tn)-as.numeric(fp)*as.numeric(fn))/sqrt( (as.numeric(tp)+as.numeric(fp))*(as.numeric(tp)+as.numeric(fn))*(as.numeric(tn)+as.numeric(fp))*(as.numeric(tn)+as.numeric(fn)) ))
}
comparison['calcFDR']<- calcFDR(comparison$FP,comparison$TP)
comparison['calcSensitivity'] <- calcSensitivity(comparison$TP,comparison$FN)
comparison['calcSpecificty'] <- calcSpecificity(comparison$TN,comparison$FP)
comparison['calcFPR'] <- calcFPR(comparison$FP,comparison$TN)
comparison['calcACC'] <- calcACC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcF1'] <- calcF1(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcMCC'] <- calcMCC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
jpeg(paste(out_dir, "plot1",sep=""))
plot(comparison$calcFDR,comparison$estimatedFDR,xlim = c(0.0,0.3),ylim=c(0.0,0.3))
dev.off()
jpeg(paste(out_dir, "plot2",sep=""))
plot(comparison$calcFPR,comparison$calcSensitivity,xlim=c(0.0,1.0),ylim=c(0.0,1.0))
dev.off()
write.table(comparison,export_matrix, sep = '\t' )
# export plots and df
# Chunk 1: setup
library(dplyr)
# Chunk 2: cars
input_comparison <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/fragdb_ch2prec/fragdb_ch2prec_confusion_matrix.tsv"
out_dir <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/fragdb_ch2prec/"
export_matrix <- paste(out_dir, "fragdb_ch2prec_confusion_matrix_export.tsv", sep = "")
comparison <- read.csv(input_comparison, sep = "\t", quote = '\"')
comparison <- comparison[order(comparison$estimatedFDR),]
# Chunk 3
calcFDR <- function(fp,tp)
{
return ( fp/(fp+tp) )
}
calcSensitivity <- function(tp,fn)
{
return( tp/(tp+fn) )
}
calcSpecificity <- function(tn,fp)
{
return( tn/(tn+fp) )
}
calcFPR <- function(fp,tn)
{
return( fp/(fp+tn) )
}
calcACC <- function(tp,tn,fp,fn)
{
return( (tp+tn)/(tp+tn+fp+fn) )
}
calcF1 <- function(tp,tn,fp,fn)
{
return( (2*tp)/(2*tp+fp+fn) )
}
calcMCC <- function(tp,tn,fp,fn)
{
return( (as.numeric(tp)*as.numeric(tn)-as.numeric(fp)*as.numeric(fn))/sqrt( (as.numeric(tp)+as.numeric(fp))*(as.numeric(tp)+as.numeric(fn))*(as.numeric(tn)+as.numeric(fp))*(as.numeric(tn)+as.numeric(fn)) ))
}
comparison['calcFDR']<- calcFDR(comparison$FP,comparison$TP)
comparison['calcSensitivity'] <- calcSensitivity(comparison$TP,comparison$FN)
comparison['calcSpecificty'] <- calcSpecificity(comparison$TN,comparison$FP)
comparison['calcFPR'] <- calcFPR(comparison$FP,comparison$TN)
comparison['calcACC'] <- calcACC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcF1'] <- calcF1(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcMCC'] <- calcMCC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
jpeg(paste(out_dir, "plot1",sep=""))
plot(comparison$calcFDR,comparison$estimatedFDR,xlim = c(0.0,0.3),ylim=c(0.0,0.3))
dev.off()
jpeg(paste(out_dir, "plot2",sep=""))
plot(comparison$calcFPR,comparison$calcSensitivity,xlim=c(0.0,1.0),ylim=c(0.0,1.0))
dev.off()
write.table(comparison,export_matrix, sep = '\t' )
# export plots and df
View(comparison)
# Chunk 1: setup
library(dplyr)
# Chunk 2: cars
input_comparison <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/fragdb_ch2prec/fragdb_ch2prec_confusion_matrix.tsv"
out_dir <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/fragdb_ch2prec/"
export_matrix <- paste(out_dir, "fragdb_ch2prec_confusion_matrix_export.tsv", sep = "")
comparison <- read.csv(input_comparison, sep = "\t", quote = '\"')
comparison <- comparison[order(comparison$estimatedFDR),]
# Chunk 3
calcFDR <- function(fp,tp)
{
return ( fp/(fp+tp) )
}
calcSensitivity <- function(tp,fn)
{
return( tp/(tp+fn) )
}
calcSpecificity <- function(tn,fp)
{
return( tn/(tn+fp) )
}
calcFPR <- function(fp,tn)
{
return( fp/(fp+tn) )
}
calcACC <- function(tp,tn,fp,fn)
{
return( (tp+tn)/(tp+tn+fp+fn) )
}
calcF1 <- function(tp,tn,fp,fn)
{
return( (2*tp)/(2*tp+fp+fn) )
}
calcMCC <- function(tp,tn,fp,fn)
{
return( (as.numeric(tp)*as.numeric(tn)-as.numeric(fp)*as.numeric(fn))/sqrt( (as.numeric(tp)+as.numeric(fp))*(as.numeric(tp)+as.numeric(fn))*(as.numeric(tn)+as.numeric(fp))*(as.numeric(tn)+as.numeric(fn)) ))
}
comparison['calcFDR']<- calcFDR(comparison$FP,comparison$TP)
comparison['calcSensitivity'] <- calcSensitivity(comparison$TP,comparison$FN)
comparison['calcSpecificty'] <- calcSpecificity(comparison$TN,comparison$FP)
comparison['calcFPR'] <- calcFPR(comparison$FP,comparison$TN)
comparison['calcACC'] <- calcACC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcF1'] <- calcF1(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcMCC'] <- calcMCC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
jpeg(paste(out_dir, "plot1",sep=""))
plot(comparison$calcFDR,comparison$estimatedFDR,xlim = c(0.0,0.3),ylim=c(0.0,0.3))
dev.off()
jpeg(paste(out_dir, "plot2",sep=""))
plot(comparison$calcFPR,comparison$calcSensitivity,xlim=c(0.0,1.0),ylim=c(0.0,1.0))
dev.off()
write.table(comparison,export_matrix, sep = '\t' )
# export plots and df
# Chunk 1: setup
library(dplyr)
# Chunk 2: cars
input_comparison <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/fragdb_ch2prec_otherinitallib/fragdb_ch2prec_otherlib_confusion_matrix.tsv"
out_dir <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/fragdb_ch2prec_otherinitallib/"
export_matrix <- paste(out_dir, "fragdb_ch2prec_otherlib_confusion_matrix_export.tsv", sep = "")
comparison <- read.csv(input_comparison, sep = "\t", quote = '\"')
comparison <- comparison[order(comparison$estimatedFDR),]
# Chunk 3
calcFDR <- function(fp,tp)
{
return ( fp/(fp+tp) )
}
calcSensitivity <- function(tp,fn)
{
return( tp/(tp+fn) )
}
calcSpecificity <- function(tn,fp)
{
return( tn/(tn+fp) )
}
calcFPR <- function(fp,tn)
{
return( fp/(fp+tn) )
}
calcACC <- function(tp,tn,fp,fn)
{
return( (tp+tn)/(tp+tn+fp+fn) )
}
calcF1 <- function(tp,tn,fp,fn)
{
return( (2*tp)/(2*tp+fp+fn) )
}
calcMCC <- function(tp,tn,fp,fn)
{
return( (as.numeric(tp)*as.numeric(tn)-as.numeric(fp)*as.numeric(fn))/sqrt( (as.numeric(tp)+as.numeric(fp))*(as.numeric(tp)+as.numeric(fn))*(as.numeric(tn)+as.numeric(fp))*(as.numeric(tn)+as.numeric(fn)) ))
}
comparison['calcFDR']<- calcFDR(comparison$FP,comparison$TP)
comparison['calcSensitivity'] <- calcSensitivity(comparison$TP,comparison$FN)
comparison['calcSpecificty'] <- calcSpecificity(comparison$TN,comparison$FP)
comparison['calcFPR'] <- calcFPR(comparison$FP,comparison$TN)
comparison['calcACC'] <- calcACC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcF1'] <- calcF1(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcMCC'] <- calcMCC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
jpeg(paste(out_dir, "plot1",sep=""))
plot(comparison$calcFDR,comparison$estimatedFDR,xlim = c(0.0,0.3),ylim=c(0.0,0.3))
dev.off()
jpeg(paste(out_dir, "plot2",sep=""))
plot(comparison$calcFPR,comparison$calcSensitivity,xlim=c(0.0,1.0),ylim=c(0.0,1.0))
dev.off()
write.table(comparison,export_matrix, sep = '\t' )
# export plots and df
# Chunk 1: setup
library(dplyr)
# Chunk 2: cars
input_comparison <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/linmzperm/linmzperm_confusion_matrix.tsv"
out_dir <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/linmzperm/"
export_matrix <- paste(out_dir, "linmzperm_confusion_matrix_export.tsv", sep = "")
comparison <- read.csv(input_comparison, sep = "\t", quote = '\"')
comparison <- comparison[order(comparison$estimatedFDR),]
# Chunk 3
calcFDR <- function(fp,tp)
{
return ( fp/(fp+tp) )
}
calcSensitivity <- function(tp,fn)
{
return( tp/(tp+fn) )
}
calcSpecificity <- function(tn,fp)
{
return( tn/(tn+fp) )
}
calcFPR <- function(fp,tn)
{
return( fp/(fp+tn) )
}
calcACC <- function(tp,tn,fp,fn)
{
return( (tp+tn)/(tp+tn+fp+fn) )
}
calcF1 <- function(tp,tn,fp,fn)
{
return( (2*tp)/(2*tp+fp+fn) )
}
calcMCC <- function(tp,tn,fp,fn)
{
return( (as.numeric(tp)*as.numeric(tn)-as.numeric(fp)*as.numeric(fn))/sqrt( (as.numeric(tp)+as.numeric(fp))*(as.numeric(tp)+as.numeric(fn))*(as.numeric(tn)+as.numeric(fp))*(as.numeric(tn)+as.numeric(fn)) ))
}
comparison['calcFDR']<- calcFDR(comparison$FP,comparison$TP)
comparison['calcSensitivity'] <- calcSensitivity(comparison$TP,comparison$FN)
comparison['calcSpecificty'] <- calcSpecificity(comparison$TN,comparison$FP)
comparison['calcFPR'] <- calcFPR(comparison$FP,comparison$TN)
comparison['calcACC'] <- calcACC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcF1'] <- calcF1(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcMCC'] <- calcMCC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
jpeg(paste(out_dir, "plot1",sep=""))
plot(comparison$calcFDR,comparison$estimatedFDR,xlim = c(0.0,0.3),ylim=c(0.0,0.3))
dev.off()
jpeg(paste(out_dir, "plot2",sep=""))
plot(comparison$calcFPR,comparison$calcSensitivity,xlim=c(0.0,1.0),ylim=c(0.0,1.0))
dev.off()
write.table(comparison,export_matrix, sep = '\t' )
# export plots and df
# Chunk 1: setup
library(dplyr)
# Chunk 2: cars
input_comparison <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/linmzperm_ch2prec/linmzperm_ch2prec2_confusion_matrix.tsv"
out_dir <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/linmzperm_ch2prec/"
export_matrix <- paste(out_dir, "linmzperm_ch2prec_confusion_matrix_export.tsv", sep = "")
comparison <- read.csv(input_comparison, sep = "\t", quote = '\"')
comparison <- comparison[order(comparison$estimatedFDR),]
# Chunk 3
calcFDR <- function(fp,tp)
{
return ( fp/(fp+tp) )
}
calcSensitivity <- function(tp,fn)
{
return( tp/(tp+fn) )
}
calcSpecificity <- function(tn,fp)
{
return( tn/(tn+fp) )
}
calcFPR <- function(fp,tn)
{
return( fp/(fp+tn) )
}
calcACC <- function(tp,tn,fp,fn)
{
return( (tp+tn)/(tp+tn+fp+fn) )
}
calcF1 <- function(tp,tn,fp,fn)
{
return( (2*tp)/(2*tp+fp+fn) )
}
calcMCC <- function(tp,tn,fp,fn)
{
return( (as.numeric(tp)*as.numeric(tn)-as.numeric(fp)*as.numeric(fn))/sqrt( (as.numeric(tp)+as.numeric(fp))*(as.numeric(tp)+as.numeric(fn))*(as.numeric(tn)+as.numeric(fp))*(as.numeric(tn)+as.numeric(fn)) ))
}
comparison['calcFDR']<- calcFDR(comparison$FP,comparison$TP)
comparison['calcSensitivity'] <- calcSensitivity(comparison$TP,comparison$FN)
comparison['calcSpecificty'] <- calcSpecificity(comparison$TN,comparison$FP)
comparison['calcFPR'] <- calcFPR(comparison$FP,comparison$TN)
comparison['calcACC'] <- calcACC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcF1'] <- calcF1(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcMCC'] <- calcMCC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
jpeg(paste(out_dir, "plot1",sep=""))
plot(comparison$calcFDR,comparison$estimatedFDR,xlim = c(0.0,0.3),ylim=c(0.0,0.3))
dev.off()
jpeg(paste(out_dir, "plot2",sep=""))
plot(comparison$calcFPR,comparison$calcSensitivity,xlim=c(0.0,1.0),ylim=c(0.0,1.0))
dev.off()
write.table(comparison,export_matrix, sep = '\t' )
# export plots and df
# Chunk 1: setup
library(dplyr)
# Chunk 2: cars
input_comparison <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/rtperm/rtperm_confusion_matrix.tsv"
out_dir <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/rtperm/"
export_matrix <- paste(out_dir, "rtperm_confusion_matrix_export.tsv", sep = "")
comparison <- read.csv(input_comparison, sep = "\t", quote = '\"')
comparison <- comparison[order(comparison$estimatedFDR),]
# Chunk 3
calcFDR <- function(fp,tp)
{
return ( fp/(fp+tp) )
}
calcSensitivity <- function(tp,fn)
{
return( tp/(tp+fn) )
}
calcSpecificity <- function(tn,fp)
{
return( tn/(tn+fp) )
}
calcFPR <- function(fp,tn)
{
return( fp/(fp+tn) )
}
calcACC <- function(tp,tn,fp,fn)
{
return( (tp+tn)/(tp+tn+fp+fn) )
}
calcF1 <- function(tp,tn,fp,fn)
{
return( (2*tp)/(2*tp+fp+fn) )
}
calcMCC <- function(tp,tn,fp,fn)
{
return( (as.numeric(tp)*as.numeric(tn)-as.numeric(fp)*as.numeric(fn))/sqrt( (as.numeric(tp)+as.numeric(fp))*(as.numeric(tp)+as.numeric(fn))*(as.numeric(tn)+as.numeric(fp))*(as.numeric(tn)+as.numeric(fn)) ))
}
comparison['calcFDR']<- calcFDR(comparison$FP,comparison$TP)
comparison['calcSensitivity'] <- calcSensitivity(comparison$TP,comparison$FN)
comparison['calcSpecificty'] <- calcSpecificity(comparison$TN,comparison$FP)
comparison['calcFPR'] <- calcFPR(comparison$FP,comparison$TN)
comparison['calcACC'] <- calcACC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcF1'] <- calcF1(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcMCC'] <- calcMCC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
jpeg(paste(out_dir, "plot1",sep=""))
plot(comparison$calcFDR,comparison$estimatedFDR,xlim = c(0.0,0.3),ylim=c(0.0,0.3))
dev.off()
jpeg(paste(out_dir, "plot2",sep=""))
plot(comparison$calcFPR,comparison$calcSensitivity,xlim=c(0.0,1.0),ylim=c(0.0,1.0))
dev.off()
write.table(comparison,export_matrix, sep = '\t' )
# export plots and df
# Chunk 1: setup
library(dplyr)
# Chunk 2: cars
input_comparison <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/swperm/swperm_confusion_matrix.tsv"
out_dir <- "/Users/alka/Desktop/quantification_comparision/20190917_1_diffFDRs/swperm/"
export_matrix <- paste(out_dir, "swperm_confusion_matrix_export.tsv", sep = "")
comparison <- read.csv(input_comparison, sep = "\t", quote = '\"')
comparison <- comparison[order(comparison$estimatedFDR),]
# Chunk 3
calcFDR <- function(fp,tp)
{
return ( fp/(fp+tp) )
}
calcSensitivity <- function(tp,fn)
{
return( tp/(tp+fn) )
}
calcSpecificity <- function(tn,fp)
{
return( tn/(tn+fp) )
}
calcFPR <- function(fp,tn)
{
return( fp/(fp+tn) )
}
calcACC <- function(tp,tn,fp,fn)
{
return( (tp+tn)/(tp+tn+fp+fn) )
}
calcF1 <- function(tp,tn,fp,fn)
{
return( (2*tp)/(2*tp+fp+fn) )
}
calcMCC <- function(tp,tn,fp,fn)
{
return( (as.numeric(tp)*as.numeric(tn)-as.numeric(fp)*as.numeric(fn))/sqrt( (as.numeric(tp)+as.numeric(fp))*(as.numeric(tp)+as.numeric(fn))*(as.numeric(tn)+as.numeric(fp))*(as.numeric(tn)+as.numeric(fn)) ))
}
comparison['calcFDR']<- calcFDR(comparison$FP,comparison$TP)
comparison['calcSensitivity'] <- calcSensitivity(comparison$TP,comparison$FN)
comparison['calcSpecificty'] <- calcSpecificity(comparison$TN,comparison$FP)
comparison['calcFPR'] <- calcFPR(comparison$FP,comparison$TN)
comparison['calcACC'] <- calcACC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcF1'] <- calcF1(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcMCC'] <- calcMCC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
jpeg(paste(out_dir, "plot1",sep=""))
plot(comparison$calcFDR,comparison$estimatedFDR,xlim = c(0.0,0.3),ylim=c(0.0,0.3))
dev.off()
jpeg(paste(out_dir, "plot2",sep=""))
plot(comparison$calcFPR,comparison$calcSensitivity,xlim=c(0.0,1.0),ylim=c(0.0,1.0))
dev.off()
write.table(comparison,export_matrix, sep = '\t' )
# export plots and df
# Chunk 1: setup
library(dplyr)
# Chunk 2: cars
input_comparison <- "/Users/alka/Desktop/quantification_comparision/20190917_0_run_reference/20190917_reference_assay_mod_confusion_matrix.tsv"
out_dir <- "/Users/alka/Desktop/quantification_comparision/20190917_0_run_reference/"
export_matrix <- paste(out_dir, "20190917_reference_assay_mod_confusion_matrix_export.tsv", sep = "")
comparison <- read.csv(input_comparison, sep = "\t", quote = '\"')
comparison <- comparison[order(comparison$estimatedFDR),]
# Chunk 3
calcFDR <- function(fp,tp)
{
return ( fp/(fp+tp) )
}
calcSensitivity <- function(tp,fn)
{
return( tp/(tp+fn) )
}
calcSpecificity <- function(tn,fp)
{
return( tn/(tn+fp) )
}
calcFPR <- function(fp,tn)
{
return( fp/(fp+tn) )
}
calcACC <- function(tp,tn,fp,fn)
{
return( (tp+tn)/(tp+tn+fp+fn) )
}
calcF1 <- function(tp,tn,fp,fn)
{
return( (2*tp)/(2*tp+fp+fn) )
}
calcMCC <- function(tp,tn,fp,fn)
{
return( (as.numeric(tp)*as.numeric(tn)-as.numeric(fp)*as.numeric(fn))/sqrt( (as.numeric(tp)+as.numeric(fp))*(as.numeric(tp)+as.numeric(fn))*(as.numeric(tn)+as.numeric(fp))*(as.numeric(tn)+as.numeric(fn)) ))
}
comparison['calcFDR']<- calcFDR(comparison$FP,comparison$TP)
comparison['calcSensitivity'] <- calcSensitivity(comparison$TP,comparison$FN)
comparison['calcSpecificty'] <- calcSpecificity(comparison$TN,comparison$FP)
comparison['calcFPR'] <- calcFPR(comparison$FP,comparison$TN)
comparison['calcACC'] <- calcACC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcF1'] <- calcF1(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
comparison['calcMCC'] <- calcMCC(comparison$TP,comparison$TN,comparison$FP,comparison$FN)
jpeg(paste(out_dir, "plot1",sep=""))
plot(comparison$calcFDR,comparison$estimatedFDR,xlim = c(0.0,0.3),ylim=c(0.0,0.3))
dev.off()
jpeg(paste(out_dir, "plot2",sep=""))
plot(comparison$calcFPR,comparison$calcSensitivity,xlim=c(0.0,1.0),ylim=c(0.0,1.0))
dev.off()
write.table(comparison,export_matrix, sep = '\t' )
# export plots and df
